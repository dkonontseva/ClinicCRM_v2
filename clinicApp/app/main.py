import asyncio
import os
from datetime import date

import uvicorn
from aiokafka import AIOKafkaProducer
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from clinicApp.app.api.auth.router import router as auth_router
from clinicApp.app.api.chat.router_socket import router as chat_router
from clinicApp.app.api.doctor_leaves.router import router as leaves_router
from clinicApp.app.api.doctors.router import router as doctors_router
from clinicApp.app.api.medical_cards.router import router as medcard_router
from clinicApp.app.api.patients.router import router as patients_router
from clinicApp.app.api.schedule.router import router as schedule_router
from clinicApp.app.api.talons.router import router as talons_router
from clinicApp.app.api.talons.dao import AppointmentsDAO
from clinicApp.app.core.kafka import ensure_topics_exist, wait_for_kafka
from clinicApp.app.api.admin import router as admin_router

app = FastAPI(openapi_url="/api/v1/clinic/openapi.json", docs_url="/api/v1/clinic/docs")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth_router, prefix="/api/v1/clinic")
app.include_router(patients_router, prefix="/api/v1/clinic")
app.include_router(doctors_router, prefix="/api/v1/clinic")
app.include_router(medcard_router, prefix="/api/v1/clinic")
app.include_router(leaves_router, prefix="/api/v1/clinic")
app.include_router(schedule_router, prefix="/api/v1/clinic")
app.include_router(talons_router, prefix="/api/v1/clinic")
app.include_router(chat_router, prefix="/api/v1/clinic")
app.include_router(admin_router, prefix="/api/v1/clinic")

KAFKA_BOOTSTRAP_SERVERS = os.getenv("KAFKA_BOOTSTRAP_SERVERS")

producer = AIOKafkaProducer(bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
background_tasks = set()

@app.on_event("startup")
async def startup_event():
    print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kafka...")
    if not await wait_for_kafka():
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka")
        return
        
    print("üì° –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Kafka —Ç–æ–ø–∏–∫–æ–≤...")
    await ensure_topics_exist()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Kafka producer...")
    await producer.start()
    print("‚úÖ Producer –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á...")
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    task1 = asyncio.create_task(AppointmentsDAO.consume_requests(date.today()))
    task2 = asyncio.create_task(AppointmentsDAO.consume_confirmations())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã
    background_tasks.add(task1)
    background_tasks.add(task2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–∏ –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    task1.add_done_callback(background_tasks.discard)
    task2.add_done_callback(background_tasks.discard)
    
    print("üîÅ Kafka consumers –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")

@app.on_event("shutdown")
async def shutdown_event():
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka producer...")
    await producer.stop()
    print("‚úÖ Producer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    for task in background_tasks:
        task.cancel()
    await asyncio.gather(*background_tasks, return_exceptions=True)

if __name__ == "__main__":
    uvicorn.run("app.main:app", host="127.0.0.1", port=8000, reload=True)
