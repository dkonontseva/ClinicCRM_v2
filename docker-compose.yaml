version: "3.11"

services:
  # Сервис для приложения клиники
  clinic_service_app:
    build:
      context: ./clinicApp
      dockerfile: Dockerfile
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]
    ports:
      - "8001:8000"
    environment:
      - DB_HOST=clinic_service_db
      - DB_PORT=5436
      - DB_NAME=clinic_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      clinic_service_db:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped

  # Сервис для ии ассистента
  assistant_service_app:
    build:
      context: ./aiAssistant
      dockerfile: Dockerfile
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]
    ports:
      - "8002:8000"
    environment:
      - DB_HOST=assistant_service_db
      - DB_PORT=5436
      - DB_NAME=assistant_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      assistant_service_db:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped

  # Сервис для PostgreSQL (клиника)
  clinic_service_db:
    image: postgres:17
    container_name: clinic_service_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: clinic_db
    ports:
      - "5436:5432"
    volumes:
      - clinic_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Сервис для PostgreSQL (ии ассистент)
  assistant_service_db:
    image: postgres:17
    container_name: assistant_service_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: assistant_db
    ports:
      - "5437:5432"
    volumes:
      - assistant_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  nginx:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./nginx_config.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - clinic_service_app
      - assistant_service_app

  # Сервис для pgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: service_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - clinic_service_db
      - assistant_service_db

  # Сервис для Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Сервис для Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Сервис для Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

# Тома для хранения данных
volumes:
  clinic_postgres_data:
  assistant_postgres_data:
  redis_data:
