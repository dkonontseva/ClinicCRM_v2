import asyncio

import uvicorn
from fastapi import FastAPI
from aiAssistant.app.api.router import router as chat_router, consume_responses, producer
from aiAssistant.app.core.kafka import ensure_topics_exist, wait_for_kafka

app = FastAPI(openapi_url="/api/v1/assistant/openapi.json", docs_url="/api/v1/assistant/docs")

app.include_router(chat_router, prefix="/api/v1/assistant")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
background_tasks = set()

@app.on_event("startup")
async def startup_event():
    print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ Kafka...")
    if not await wait_for_kafka():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka")
        return
        
    print("üì° –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Kafka —Ç–æ–ø–∏–∫–æ–≤...")
    await ensure_topics_exist()
    
    print("üì° –ó–∞–ø—É—Å–∫ Kafka producer...")
    await producer.start()
    print("‚úÖ Producer –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ consumer...")
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(consume_responses())
    background_tasks.add(task)
    task.add_done_callback(background_tasks.discard)
    
    print("üîÅ Kafka consumer –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")

@app.on_event("shutdown")
async def shutdown_event():
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka producer...")
    await producer.stop()
    print("‚úÖ Producer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    for task in background_tasks:
        task.cancel()
    await asyncio.gather(*background_tasks, return_exceptions=True)

if __name__ == "__main__":
    uvicorn.run("app.main:app", host="127.0.0.1", port=8000, reload=True)