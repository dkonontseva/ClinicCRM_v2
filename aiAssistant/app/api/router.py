import asyncio
import json
import os
from datetime import datetime

from aiokafka import AIOKafkaProducer, AIOKafkaConsumer
from fastapi import APIRouter, Query, HTTPException
from redis import asyncio as aioredis
from select import select
from sqlalchemy import select

from aiAssistant.app.api import schemas, models
from aiAssistant.app.core.database import async_session_maker
from aiAssistant.ml.training.predict import vectorizer, model, predict_specialist_and_recommendation

router = APIRouter(prefix="/assistant", tags=["AI assistant"])


response_futures = {}

redis_client = aioredis.from_url("redis://redis:6379", db=0)
KAFKA_BOOTSTRAP_SERVERS = os.getenv("KAFKA_BOOTSTRAP_SERVERS", "kafka:9092")
REQUEST_TOPIC = os.getenv("REQUEST_TOPIC", "appointment_requests")
RESPONSE_TOPIC = os.getenv("RESPONSE_TOPIC", "appointment_responses")
CONFIRMATION_TOPIC = os.getenv("CONFIRMATION_TOPIC", "appointment_confirmations")
ERROR_TOPIC = os.getenv("ERROR_TOPIC", "appointment_errors")

producer = AIOKafkaProducer(bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS)

@router.get("/chat", response_model=list[schemas.ChatHistory])
async def get_complaints(patient_id: int = Query(..., gt=0)):
    async with async_session_maker() as session:
        query = (
            select(
                models.Complaints.id,
                models.Complaints.symptoms,
                models.Complaints.created_at,
                models.Complaints.status,
                models.Recommendations.recommended_doctor_specialty,
                models.Recommendations.recommendation_text,
                models.Recommendations.appointment_offered,
                models.AppointmentRequests.doctor_id,
                models.AppointmentRequests.preferred_date,
                models.AppointmentRequests.preferred_time,
            )
            .join(models.Recommendations, models.Recommendations.complaint_id == models.Complaints.id, isouter=True)
            .join(models.AppointmentRequests, models.AppointmentRequests.complaint_id == models.Complaints.id, isouter=True)
            .where(models.Complaints.patient_id == patient_id)
        )
        result = await session.execute(query)
        complaints = result.all()

        if not complaints:
            raise HTTPException(status_code=404, detail="–ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!")

        response_data = []
        for row in complaints:
            (complaint_id, symptoms, created_at, status,
             recommended_doctor_specialty, recommendation_text, appointment_offered,
             doctor_id, preferred_date, preferred_time) = row

            response_data.append(schemas.ChatHistory(
                complaint_id=complaint_id,
                symptoms=symptoms,
                created_at=created_at,
                status=status,
                recommendations=schemas.RecommendationsOutput(
                    recommended_doctor_specialty=recommended_doctor_specialty or "",
                    recommendation_text=recommendation_text or "",
                    appointment_offered=appointment_offered,
                ),
                appointment_requests=schemas.AppointmentRequestOutput(
                    doctor_id=doctor_id,
                    preferred_date=preferred_date,
                    preferred_time=preferred_time,
                ) if doctor_id is not None else None
            ))

        return response_data


@router.post("/complaints/", response_model=schemas.RecommendationsOutput)
async def create_complaint(complaint: schemas.ComplaintsInput):
    async with async_session_maker() as session:
        symptoms = complaint.symptoms

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–ø—Ç–æ–º—ã –≤ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        symptoms_vector = vectorizer.transform([symptoms]).toarray()
    
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞
        specialist = model.predict(symptoms_vector)[0]
    
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = predict_specialist_and_recommendation(symptoms)

        db_complaint = models.Complaints(
            patient_id=complaint.patient_id,
            symptoms=symptoms,
            created_at=datetime.now(),
            status="pending"
        )
        session.add(db_complaint)
        await session.commit()
        await session.refresh(db_complaint)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∂–∞–ª–æ–±—É –≤ Redis
        await redis_client.setex(
            f"active_complaint:{complaint.patient_id}",
            3600,  # TTL 1 —á–∞—Å
            str(db_complaint.id)
        )
        print(f"üíæ Saved active complaint {db_complaint.id} for patient {complaint.patient_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤ Redis
        await redis_client.setex(
            f"specialty:{db_complaint.id}",
            3600,  # TTL 1 —á–∞—Å
            specialist
        )
        print(f"üíæ Saved specialty {specialist} for complaint {db_complaint.id}")

        db_recommendation = models.Recommendations(
            complaint_id=db_complaint.id,
            recommended_doctor_specialty=specialist,
            recommendation_text=recommendations,
            appointment_offered=False
        )
        session.add(db_recommendation)
        await session.commit()
        await session.refresh(db_recommendation)
        print(f"üí° Created recommendation for complaint {db_complaint.id}")

        return {
            "recommended_doctor_specialty": specialist,
            "recommendation_text": recommendations,
            "message": "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é –∑–∞–ø–∏—Å—å?",
            "appointment_offered": False
        }

@router.post("/search-appointment/", response_model=schemas.RecommendationsOutput)
async def search_appointment(patient_id: int = Query(..., gt=0)):
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∂–∞–ª–æ–±—É –∏–∑ Redis
        active_complaint = await redis_client.get(f"active_complaint:{patient_id}")
        if not active_complaint:
            raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è –∂–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        complaint_id = int(active_complaint.decode('utf-8'))
        print(f"üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∂–∞–ª–æ–±—ã {complaint_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ Redis
        specialty = await redis_client.get(f"specialty:{complaint_id}")
        if not specialty:
            raise HTTPException(status_code=404, detail="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        specialty = specialty.decode('utf-8')
        print(f"üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã
        query = select(models.Recommendations).where(
            models.Recommendations.complaint_id == complaint_id
        )
        result = await session.execute(query)
        recommendation = result.scalar_one_or_none()
        
        if not recommendation:
            raise HTTPException(status_code=404, detail="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Ç–∞–ª–æ–Ω–∞
        request_data = {
            "complaint_id": complaint_id,
            "specialty": specialty
        }
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Kafka: {request_data}")
        
        # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        response_future = asyncio.Future()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Future –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        response_futures[complaint_id] = response_future
        print(f"üìù –°–æ–∑–¥–∞–Ω Future –¥–ª—è –∂–∞–ª–æ–±—ã {complaint_id}")
        
        try:
            await producer.send_and_wait(REQUEST_TOPIC, json.dumps(request_data).encode("utf-8"))
            print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Kafka")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã {complaint_id}...")
                response = await asyncio.wait_for(response_future, timeout=30.0)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response}")
                
                return {
                    "recommended_doctor_specialty": specialty,
                    "recommendation_text": recommendation.recommendation_text,
                    "message": f"–î–æ–∫—Ç–æ—Ä {response['doctor']}, –¥–∞—Ç–∞ {response['date']}, –≤—Ä–µ–º—è {response['time']}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?",
                    "appointment_offered": True,
                    "doctor_id": response["doctor_id"],
                    "date": response["date"],
                    "time": response["time"]
                }
            except asyncio.TimeoutError:
                print(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã {complaint_id}")
                return {
                    "recommended_doctor_specialty": specialty,
                    "recommendation_text": recommendation.recommendation_text,
                    "message": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    "appointment_offered": False
                }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Kafka: {e}")
            raise
        finally:
            # –£–¥–∞–ª—è–µ–º Future –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            if complaint_id in response_futures:
                del response_futures[complaint_id]
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω Future –¥–ª—è –∂–∞–ª–æ–±—ã {complaint_id}")

async def wait_for_kafka(bootstrap_servers: str, max_retries: int = 20, retry_delay: int = 5):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kafka"""
    for i in range(max_retries):
        try:
            consumer = AIOKafkaConsumer(
                bootstrap_servers=bootstrap_servers,
                group_id=f"health_check_{i}",
                auto_offset_reset="earliest",
                enable_auto_commit=False
            )
            await consumer.start()
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
            topics = await consumer.topics()
            print(f"Available topics: {topics}")
            await consumer.stop()
            print("Successfully connected to Kafka")
            return True
        except Exception as e:
            print(f"Attempt {i+1}/{max_retries} failed: {e}")
            if i < max_retries - 1:
                await asyncio.sleep(retry_delay)
    return False

async def consume_responses():
    """–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π consumer –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∏–Ω–∏–∫–∏"""
    print("–ó–∞–ø—É—Å–∫ consumer –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∏–Ω–∏–∫–∏...")
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kafka
    if not await wait_for_kafka(KAFKA_BOOTSTRAP_SERVERS):
        print("‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return
    
    consumer = AIOKafkaConsumer(
        RESPONSE_TOPIC,
        bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
        group_id="assistant_group",
        auto_offset_reset="latest",
        enable_auto_commit=True
    )
    
    try:
        await consumer.start()
        async for message in consumer:
            try:
                response = json.loads(message.value.decode("utf-8"))
                complaint_id = response.get("complaint_id")
                
                if "doctor" in response:  # –≠—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ —Å–ª–æ—Ç–æ–º
                    print(f"–ü–æ–ª—É—á–µ–Ω —Å–ª–æ—Ç –¥–ª—è –∂–∞–ª–æ–±—ã {complaint_id}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
                    await redis_client.setex(
                        f"slot:{complaint_id}",
                        300,  # TTL 5 –º–∏–Ω—É—Ç
                        json.dumps(response)
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    async with async_session_maker() as session:
                        query = select(models.Recommendations).where(
                            models.Recommendations.complaint_id == complaint_id
                        )
                        result = await session.execute(query)
                        recommendation = result.scalar_one_or_none()
                        if recommendation:
                            recommendation.appointment_offered = True
                            await session.commit()
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Future, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if complaint_id in response_futures:
                        future = response_futures[complaint_id]
                        if not future.done():
                            future.set_result(response)
                            print(f"‚úÖ Future —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∂–∞–ª–æ–±—ã {complaint_id}")
                
                elif "message" in response:  # –≠—Ç–æ –æ—Ç–≤–µ—Ç –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                    print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–ª—è –∂–∞–ª–æ–±—ã {complaint_id}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã
                    async with async_session_maker() as session:
                        query = select(models.Complaints).where(
                            models.Complaints.id == complaint_id
                        )
                        result = await session.execute(query)
                        complaint = result.scalar_one_or_none()
                        if complaint:
                            complaint.status = "confirmed"
                            await session.commit()
                
                await consumer.commit()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ consumer: {e}")
        raise
    finally:
        await consumer.stop()

@router.get("/consume-appointment-response/")
async def consume_appointment_response(complaint_id: int):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    slot_data = await redis_client.get(f"slot:{complaint_id}")
    if not slot_data:
        return {"message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"}
    
    slot = json.loads(slot_data)
    return {
        "message": f"–î–æ–∫—Ç–æ—Ä {slot['doctor']}, –¥–∞—Ç–∞ {slot['date']}, –≤—Ä–µ–º—è {slot['time']}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?",
        "complaint_id": complaint_id,
        "doctor": slot["doctor"],
        "date": slot["date"],
        "time": slot["time"]
    }

@router.post("/confirm-appointment/")
async def confirm_appointment(complaint_id: int, confirmed: bool, patient_id: int):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    if confirmed:
        slot_data = await redis_client.get(f"slot:{complaint_id}")
        if not slot_data:
            return {"message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."}

        slot = json.loads(slot_data)
        
        appointment_date = datetime.strptime(slot["date"], "%Y-%m-%d").date()
        appointment_time = datetime.strptime(slot["time"], "%H:%M").time()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        db_appointment = models.AppointmentRequests(
            patient_id=patient_id,
            complaint_id=complaint_id,
            doctor_id=slot["doctor_id"],
            preferred_date=appointment_date,
            preferred_time=appointment_time,
            status="confirmed"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∫–ª–∏–Ω–∏–∫—É
        confirmation = {
            "complaint_id": complaint_id,
            "patient_id": patient_id,
            "doctor_id": slot["doctor_id"],
            "date": slot["date"],
            "time": slot["time"],
            "confirmed": confirmed
        }

        try:
            await producer.send_and_wait(
                CONFIRMATION_TOPIC,
                json.dumps(confirmation).encode("utf-8")
            )
            async with async_session_maker() as session:
                session.add(db_appointment)
                await session.commit()
            return {"message": "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kafka: {e}")
            raise    
    else:
        await redis_client.delete(f"slot:{complaint_id}")
        return {"message": "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞."}
